Transformation Logs from .evtx to .csv. and deleing the column 
Transferring data to s3.
Step 1. Login into the beren workspace and open the network file share in IP \\172.16.2.199\Audit_logs and go to the Audit_logs
 
Step 2. Copy the log file and save it. 
Step 3. Now open Powershell as administrator and go the file path where you saved the logs file. And type below command.
> Install-Module RedshiftCmdlets
> Set-ExecutionPolicy RemoteSigned
> Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
 
 
	> .\evtxtocsv.ps1 .\audit_svm_BerenSAS_NetappVolumes_last.evtx
 


Creating table in Redshift:
CREATE TABLE "netapp_audit_logs"."audit_logs"( EventID character varying(50) encode lzo, EventName character varying(50) encode lzo, Version character varying(50) encode lzo, Source character varying(50) encode lzo, Result character varying(50) encode lzo, TimeCreated character varying(50) encode lzo, Computer character varying(500) encode lzo, ComputerUUID character varying(1000) encode lzo, IpAddress character varying(50) encode lzo, IpPort character varying(50) encode lzo, TargetUserSID character varying(500) encode lzo, TargetUserName character varying(50) encode lzo, TargetDomainName character varying(100) encode lzo, SubjectIP character varying(50) encode lzo, SubjectDomainName character varying(50) encode lzo, SubjectUserName character varying(50) encode lzo, ObjectServer character varying(100) encode lzo, ObjectType character varying(1000) encode lzo, ObjectName character varying(1000) encode lzo, InformationRequested character varying(1000) encode lzo, AccessList character varying(500) encode lzo, DesiredAccess character varying(1000) encode lzo, Attributes character varying(500) encode lzo, InformationSet character varying(1000) encode lzo, OldPath character varying(1000) encode lzo, NewPath character varying(1000) encode lzo);

Powershell code for implementation. 
param (
    [string]$infile = $null
)

if (!$infile) {
    Write-Host "usage: evtx_to_csv.ps1 -infile <evtx file in>"
    exit
}

$initem = Get-Item $infile
$directory = $initem.Directory.FullName
$outfile=$($initem.BaseName + ".csv")

echo "Reading in the .evtx."
$events = get-winevent -path $infile

echo "Finding unique fields." 
# first pull out all unique field names
# iterate over every event and add the field names to an array. only add if they don't already exist in the array
$fields=@()
$fields += "Message"
#$fields += "TimeCreated"
foreach ($Event in $events) { 
    $xml = [xml]($Event.ToXml())
    foreach ($s in $xml.Event.System.ChildNodes) {
        if ($s.Name -and $fields -notcontains $s.Name -and $s.Name -ne "Microsoft-Windows-Security-Auditing") {
            $fields += $s.Name
        }
    }
    foreach ($d in $xml.Event.EventData.Data) {
        if ($d.Name -and $fields -notcontains $d.Name) {
            $fields += $d.Name
        }
    }
}
echo "Processing lines. it might take some time if file is large..."
foreach ($Event in $events) { 
    # hash of fields and their values in this event
    $line=@{}
    $line.add("Message", ($Event.Message-split '\n')[0].replace("`n","").replace("`r",""))
    $line.add("TimeCreated", $Event.TimeCreated.ToString())
    $xml = [xml]($Event.ToXml())
    $unlabled_fields=@()
    foreach ($s in $xml.Event.System.ChildNodes) {
        if ($s.InnerText) {
            $line.Add($s.Name, $s.InnerText)

        }
    }
    foreach ($d in $xml.Event.EventData.Data) {
        # if the element has a name, then it is properly formatted and parse it
        if ($d.Name) {
            $text = $d.InnerText
            if ($text -eq $null) {
                $text = ""
            }
            # replace newlines with a string representing a newline
            # csv will be a mess without this
            $text = $text.replace("`n","\n").replace("`r","\n")
            # if something didn't parse correctly or is null, this will error and print out here
            try {
                $line.Add($d.Name, $text)
            }
            catch {
                $d
            }
        }
        # if the element does not have a name, then it is a poorly formatted event log. 
        # treat the element as a piece of text without key/value and create placeholder field names
        elseif ($d) {
            $text = $d
            $text = $text.replace("`n","\n").replace("`r","\n")
            $newfield = "unlabeled" + ([int]$unlabled_fields.count + 1)
            $unlabled_fields += $newfield
            $line.Add($newfield, $text)
        }
    }
    $lines += $line
    # add any new field names that were added as it processed unlabled_fields
    foreach ($f in $unlabled_fields){
        if ($fields -notcontains $f) {
            $fields += $f
        }
    }
}
echo ("Processed " + $lines.Length + " events.")
echo "Writing output file"

$output_file = [System.IO.StreamWriter] $("$directory\$outfile")

# write the header
foreach ($field in $fields) {
    if ($field -ne $null){
        $output_file.Write($field + ",")
    }
}
$output_file.WriteLine()
# loop through each line and add it to the csv
foreach ($line in $lines) {
    # check each line for a field matching every header value. 
    foreach ($field in $fields) {
        $output_file.Write($line.$field + ",")
    }
    $output_file.WriteLine()
    
}

$source = Get-ChildItem -Recurse $_.Name -Include 'audit_svm_BerenSAS_NetappVolumes_last.csv'
echo $source
echo "Removing unwanted columns from the above file..."
(Import-CSV $source |
Select-Object EventID, EventName, Version, Source, Result, TimeCreated, Computer, ComputerUUID, IpAddress, IpPort, TargetUserSID, TargetUserName, TargetDomainName, SubjectIP, SubjectDomainName, SubjectUserName, ObjectServer, ObjectType, ObjectName, InformationRequested, AccessList, DesiredAccess, Attributes, InformationSet, OldPath, NewPath |  
Export-CSV -NoTypeInformation -Path "C:\Users\RavishankarVishwakar\OneDrive - CIRCULANTS\Desktop\test$(Get-Date -UFormat "%m-%m-%y_%H-%m-%S").csv")
echo "Your File is ready..."
#echo "Deleting aditional CSV  files from the system..."
#Remove-Item -Path $source

$output_file.Flush()
$output_file.C




